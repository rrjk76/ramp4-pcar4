import{bp as l,bq as y}from"./main-DjP14LTj.js";import{a as b}from"./CIMSymbolHelper-C9ese8Iz.js";import{CIMSymbolRasterizer as j}from"./CIMSymbolRasterizer-RLGU0b42.js";import{OverrideHelper as R}from"./OverrideHelper-CZdwjfVi.js";import{V}from"./utils-BRg6PM3S.js";import{t as S,l as q}from"./utils-Tkpjs6c9.js";import"./preload-helper-ExcqyqRp.js";import"./BidiEngine-DNnuvc1i.js";import"./fontUtils-CgZixVz5.js";import"./OptimizedGeometry-HCQpwVRO.js";import"./memoryEstimations-DOOUGMEM.js";import"./Rect-DD2mtLLs.js";import"./enums-BJSSbDkD.js";import"./defaultCIMValues-DII_GG3u.js";import"./rasterizingUtils-DXhhOiXw.js";import"./floatRGBA-BSip6sPi.js";import"./definitions-CPtb4TQS.js";import"./mat2d-D9DBP-jx.js";import"./common-DQOJ18NT.js";import"./mat2df32-orApM5a3.js";import"./vec2-maR1OrZI.js";import"./vec2f32-BbH2jxlN.js";import"./BoundingBox-CnpCxTZE.js";import"./CIMResourceManager-Bm5FYxS1.js";import"./imageUtils-D0_hAkel.js";import"./colorUtils-C7x9dn3F.js";import"./vec42-CKs01hkn.js";import"./vec4f64-o2zAXfmz.js";import"./callExpressionWithFeature-Lj0xxE8c.js";import"./quantizationUtils-DOwqR1_b.js";import"./globalCss-KnW5pPMg.js";import"./Queue-CTkgIBT9.js";import"./signal-E7ULl-sq.js";import"./Version-Bc_iivf3.js";import"./jsxFactory-C0AHuf08.js";import"./intl-CiVyaTj9.js";import"./uuid-Cl5lrJ4c.js";import"./utils-CxzEA29L.js";import"./jsonUtils-Dm_-TeK6.js";import"./parser-DQaaf5nP.js";import"./mat4f32-DcsiF_Rp.js";import"./mat4-CYMzV1bI.js";import"./cimSymbolUtils-rHBEwQPt.js";import"./LRUCache-_N5YHjj2.js";import"./MemCache-nBENzHdv.js";import"./webStyleSymbolUtils-CAe701_w.js";import"./devEnvironmentUtils-8WtPGj6h.js";import"./styleUtils-B7aeJEnM.js";import"./webStyleAcceptedFormats-CG7ZQ6BV.js";import"./ColorStop-yZath20C.js";import"./TimeExtent-DG5VDgCK.js";import"./utils-CGjMotjd.js";import"./timeZoneUtils-ctmV1c_V.js";import"./typeUtils-DMk3aawg.js";import"./ClassBreaksRenderer-2_S3fZqZ.js";import"./commonProperties-lwduaWPw.js";import"./colorRamps-7niflw5Q.js";import"./visualVariableUtils-CU8xxoGv.js";import"./lengthUtils-C36O5hiv.js";import"./RendererLegendOptions-BULeCc-J.js";import"./FieldsIndex-CpET8W1v.js";import"./heatmapUtils-C8qQVis_.js";import"./SimpleRenderer-DuyaAw3l.js";import"./UniqueValueRenderer-BaDVTX47.js";import"./diffUtils-Bd0PNRw4.js";const f=new j(null),u=l(S.size),P=l(S.maxSize),M=l(S.lineWidth),D=1;async function E(a,t,n){const e=t?.size;let i=e!=null&&typeof e=="object"&&"width"in e?e.width:e,r=e!=null&&typeof e=="object"&&"height"in e?e.height:e;if(i==null||r==null)if(n==="esriGeometryPolygon")i=r=t.maxSize?Math.min(t.maxSize,u):u;else{const o=await U(a,t,n);o&&(i=o.width,r=o.height),n==="esriGeometryPolyline"&&(i=t.maxSize?Math.min(t.maxSize,M):M),i=i!=null&&isFinite(i)?Math.min(i,P):u,r=r!=null&&isFinite(r)?Math.max(Math.min(r,P),D):u}return t.style==="legend"&&n==="esriGeometryPolyline"&&(i=M),{width:i,height:r}}async function U(a,t,n){const{feature:e,fieldMap:i,viewParams:r}=t.cimOptions||t,o=await R.resolveSymbolOverrides(a.data,e,null,i,n,null,r);if(!o)return null;(a=a.clone()).data={type:"CIMSymbolReference",symbol:o},a.data.primitiveOverrides=void 0;const p=[];return b.fetchResources(o,f.resourceManager,p),b.fetchFonts(o,f.resourceManager,p),p.length>0&&await Promise.all(p),b.getEnvelope(o,null,f.resourceManager)}async function Yt(a,t={}){const{node:n,opacity:e,symbolConfig:i}=t,r=i!=null&&typeof i=="object"&&"isSquareFill"in i&&i.isSquareFill,o=t.cimOptions||t,p=o.geometryType||V(a?.data?.symbol),m=await E(a,t,p),{feature:C,fieldMap:G}=o,I=t?.geometry||r||p!=="esriGeometryPolygon"?"preview":"legend";let v=m;const x=m;if(t?.geometry&&(p==="esriGeometryPolygon"||p==="esriGeometryPolyline")&&(y(m.width)<200||y(m.height)<200)){const F=m.width>m.height?l(200)*m.height/m.width:l(200);v={width:m.width>m.height?l(200):l(200)*m.width/m.height,height:F}}const g=await f.rasterizeCIMSymbolAsync(a,C,v,I,G,p,null,o.viewParams,o.allowScalingUp,t?.geometry?.toJSON());if(!g)return null;const{width:L,height:O}=g,h=document.createElement("canvas");h.width=L,h.height=O,h.getContext("2d").putImageData(g,0,0);const d=y(x.width),w=y(x.height),s=new Image(d,w);s.src=h.toDataURL(),s.ariaLabel=t.ariaLabel??null,s.alt=t.ariaLabel??"",e!=null&&(s.style.opacity=`${e}`);let c=s;if(t.effectView!=null){const z={shape:{type:"image",x:0,y:0,width:d,height:w,src:s.src},fill:null,stroke:null,offset:[0,0]};c=q([[z]],[d,w],{effectView:t.effectView,ariaLabel:t.ariaLabel})}return n&&c&&n.appendChild(c),c}export{Yt as previewCIMSymbol};
