import{a5 as O,aX as U,n as V,Z as Y,v as s,x as l,J as D}from"./main-B-FL_ckZ.js";import{w as E}from"./vec32-Cb0gihbp.js";import{U as F,O as G}from"./projection-DdQ02quy.js";import{P as W}from"./normalizeUtils-B-IjnsJU.js";import{u as H}from"./scaleUtils-PyU7zmYU.js";import{l as I,u as J,t as T}from"./gridUtils-DmgICtzN.js";import{f as d,d as Z,r as X,b as _,c as k}from"./SketchViewModel-DDx3Jc_B.js";import"./preload-helper-ExcqyqRp.js";import"./common-DQOJ18NT.js";import"./utils-CUWkDQzB.js";import"./utils-DVuDy6nH.js";import"./geodesicUtils-VMJ_GF4U.js";import"./UpdatingHandles-CBS01PrZ.js";import"./GraphicsLayer-jnxXuMwt.js";import"./GraphicsCollection-DLMY4wgz.js";import"./Layer-DZzkWlRr.js";import"./TimeExtent-l1zy2JWC.js";import"./ScaleRangeLayer-mEo8733Y.js";import"./layerContainerType-C5CzMsLd.js";import"./jsonUtils-GRypMXOh.js";import"./parser-BMuIF5lg.js";import"./mat4f32-DcsiF_Rp.js";import"./mat4-sSuybu4P.js";import"./ElevationInfo-CnvnfmvB.js";import"./lengthUtils-YoW5E_3l.js";import"./globalCss-D7oT60T7.js";import"./Queue-CkVp1vLB.js";import"./signal-Dv2tZxvA.js";import"./Version-BT2xhOES.js";import"./quantityUtils-jY0JeoDq.js";import"./vec2-maR1OrZI.js";import"./vec2f64-DohEyf3f.js";import"./projectVectorToVector-CUdA4p0U.js";import"./projectPointToVector-BYGXKme3.js";import"./Query-qd1JB6Zm.js";import"./Field-CQ_NhE7H.js";import"./fieldType-BcIp_PuB.js";import"./vec42-CKs01hkn.js";import"./vec4f64-o2zAXfmz.js";import"./plane-DfQdoexa.js";import"./mat3f64-q3fE-ZOt.js";import"./mat4f64-Dk4dwAN8.js";import"./quatf64-aQ5IuZRd.js";import"./sphere-BPOapVHZ.js";import"./mat3-CruJiiUv.js";let o=class extends O{constructor(t){super(t),this.options=null}destroy(){this._set("options",null)}get grid(){return this.view.grid}get effectiveViewRotation(){return this.grid?.rotateWithMap?0:U(this.view.rotation??0)}get gridRotation(){return U(this.grid?.rotation??0)}get gridCenter(){const{spatialReference:t,grid:r}=this;if(!r||!t||!F(r.center.spatialReference,t))return null;try{const e=G(r.center,t),i=t.isWrappable&&this.view?.center!=null?W(e.x,this.view.center.x,t):e.x;return d(i,e.y,e.z)}catch(e){return V.getLogger(this).errorOnce("Grid Snapping - Failed to project grid center.",e),null}}get offsetScaleFactor(){const{pixelsPerStride:t,grid:r}=this;if(!r||!t)return 1;const{majorLineInterval:e,dynamicScaling:i}=r;return e<1?null:I(e,t,i)}get spatialReference(){return this.view.spatialReference}get gridMetersPerStride(){const{grid:t}=this;return t?Y(t.spacing,t.units,"meters"):null}get viewMetersPerPixel(){const{viewMetersPerSRUnit:t}=this;return t==null?null:t*H(this.view.scale,this.view.spatialReference)}get viewMetersPerSRUnit(){const{spatialReference:t}=this.view;return this.gridCenter?J(this.gridCenter[0],this.gridCenter[1],t):null}get pixelsPerStride(){const{gridMetersPerStride:t,viewMetersPerPixel:r}=this;return r&&t?t/r:null}get updating(){return this.grid!=null&&this.spatialReference!=null&&this.viewMetersPerSRUnit==null}async fetchCandidates(t,r,e){const{options:i,view:n}=this;if(!i?.effectiveGridEnabled||!n.grid||e.feature?.attributes&&Z in e.feature.attributes)return[];const p=e.coordinateHelper.arrayToPoint(t),a=i.distance*(e.pointer==="touch"?i.touchSensitivityMultiplier:1);return this.fetchCandidatesSync(p,a)}fetchCandidatesSync(t,r){const e=[],{grid:i,effectiveViewRotation:n,gridRotation:p,gridCenter:a,viewMetersPerPixel:h,viewMetersPerSRUnit:m,offsetScaleFactor:S,spatialReference:g,gridMetersPerStride:C,pixelsPerStride:$}=this;if(!(i&&h&&m&&a&&g&&S&&C&&$)||!i.dynamicScaling&&$<T||!F(t.spatialReference,g))return e;const y=G(t,g),z=d(y.x,y.y,y.z),u=f(z,-p,a,-n),P=C/m*S,c=q(u,P,a),{shouldSnapX:v,shouldSnapY:w}=A(c,u,r,h,m);if(!v&&!w)return[];const L=d((v?c:u)[0],(w?c:u)[1]),M=f(L,p,a,n),b=f(c,p,a,n);if(w){const R=j(c,u,P,"y"),x=f(R,p,a,n);e.push(new X({lineStart:b,lineEnd:x,targetPoint:M,isDraped:!1}))}if(v){const R=j(c,u,P,"x"),x=f(R,p,a,n);e.push(new X({lineStart:b,lineEnd:x,targetPoint:M,isDraped:!1}))}return v&&w&&e.push(new _(M,e[0],e[1],!1)),e}};s([l({constructOnly:!0})],o.prototype,"view",void 0),s([l()],o.prototype,"options",void 0),s([l()],o.prototype,"grid",null),s([l()],o.prototype,"effectiveViewRotation",null),s([l()],o.prototype,"gridRotation",null),s([l()],o.prototype,"gridCenter",null),s([l()],o.prototype,"offsetScaleFactor",null),s([l()],o.prototype,"spatialReference",null),s([l()],o.prototype,"gridMetersPerStride",null),s([l()],o.prototype,"viewMetersPerPixel",null),s([l()],o.prototype,"viewMetersPerSRUnit",null),s([l()],o.prototype,"pixelsPerStride",null),s([l()],o.prototype,"updating",null),o=s([D("esri.views.interactive.snapping.GridSnappingEngine")],o);const f=(t,r,e,i)=>{const n=k(t[0],t[1],t[2]);return E(n,E(n,n,e,r),e,i)},q=(t,r,e)=>{const i=(t[0]-e[0])/r,n=(t[1]-e[1])/r,p=Math.trunc(i),a=Math.trunc(n),h=Math.round(i%1),m=Math.round(n%1),S=e[0]+(p+h)*r,g=e[1]+(a+m)*r;return d(S,g)},A=(t,r,e,i,n)=>{if(i<=0)return{shouldSnapX:!1,shouldSnapY:!1};const p=(t[0]-r[0])/i,a=(t[1]-r[1])/i;return{shouldSnapX:Math.abs(p*n)<e,shouldSnapY:Math.abs(a*n)<e}},j=(t,r,e,i)=>{if(i==="y"){const p=r[0]>t[0]?1:-1;return d(t[0]+e*p,t[1])}const n=r[1]>t[1]?1:-1;return d(t[0],t[1]+e*n)};export{o as GridSnappingEngine};
